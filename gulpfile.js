const { src, dest, series} =  require('gulp');
const htmlMinify = require('html-minifier');
const minijs = require("gulp-terser");
const concat = require("gulp-concat");
const cleanCSS = require("gulp-clean-css");
const del = require("del");
const merge = require("merge-stream");
const purgecss = require('gulp-purgecss');

//============================================================================================

const html_dirs = ['dist/capstone/agency/templates/', 'dist/capstone/accounts/templates/', 
  'dist/capstone/mail/templates/','dist/capstone/news/templates/']
  

function statics(d){
    if (d) return 'dist/capstone/agency/static/'+d;
    return 'dist/capstone/agency/static/';
};

const vendersJs=[
    'capstone/agency/static/js/jquery.min.js',
    'node_modules/bootstrap/dist/js/bootstrap.bundle.min.js',
    'node_modules/inputmask/dist/jquery.inputmask.min.js',
    'node_modules/bs-custom-file-input/dist/bs-custom-file-input.min.js', 
    'node_modules/select2/dist/js/select2.full.min.js', 
    'node_modules/jquery-easing/dist/jquery.easing.1.3.umd.min.js',
    //'node_modules/@fortawesome/fontawesome-free/js/all.min.js', 
    'node_modules/moment/min/moment-with-locales.min.js', 
    "capstone/agency/static/js/fastclick.js",
    'node_modules/admin-lte/dist/js/adminlte.min.js',
]
const vendersCss=[
    'node_modules/animate.css/animate.min.css',
     'node_modules/@fortawesome/fontawesome-free/css/all.min.css',
     'node_modules/admin-lte/dist/css/adminlte.min.css',
     'node_modules/icheck-bootstrap/icheck-bootstrap.min.css',
     'node_modules/select2/dist/css/select2.min.css',
     'node_modules/select2-theme-bootstrap4/dist/select2-bootstrap.min.css',
 ]
// Clean vendor
function clean() {
    return del(["dist/**/*"]);
}

// Bring third party dependencies from node_modules into vendor directory
function copies() {  
    // capstone
    let capstone = src(['capstone/**/*','Dockerfile','entrypoint.sh']).pipe(dest('dist/capstone'));
    
    let css = src(vendersCss).pipe(dest(statics('css')));

    let Js = src([
        'node_modules/admin-lte/dist/js/pages*/**/*',
        'node_modules/inputmask/dist/bindings*/**/*',
        'node_modules/select2/dist/js/i18n*/**/*',
        ...vendersJs
    ]).pipe(dest(statics('js')));

    let summernote = src([
        'node_modules/summernote/dist/font*/**/*',
        'node_modules/summernote/dist/lang*/**/*',
        'node_modules/summernote/dist/plugin*/**/*',
        'node_modules/summernote/dist/summernote-bs4.min.css',
        'node_modules/summernote/dist/summernote-bs4.css.map',
        'node_modules/summernote/dist/summernote-bs4.min.js',
        'node_modules/summernote/dist/summernote-bs4.js.map',
    ]).pipe(dest(statics('summernote')));

    let assets = src([
        'node_modules/@fortawesome/fontawesome-free/webfonts*/**/*',
        'node_modules/admin-lte/dist/img*/**/*',
    ]).pipe(dest(statics()));

    return merge(capstone, css, Js,summernote, assets);
}

// css
function allcss() {
    return src([
        ...vendersCss,
        "capstone/agency/static/css/site.css"
    ]).pipe(cleanCSS())
        .pipe(concat("allcss.min.css"))
        .pipe(dest(statics('css')));

}

// JS task
function alljs() {
    return src([...vendersJs,            
            "capstone/agency/static/js/idleTimer.min.js",
            "capstone/agency/static/js/core.js",
            "capstone/agency/static/js/site.js"
        ])
        .pipe(minijs())
        .pipe(concat("alljs.min.js"))
        .pipe(dest(statics('js')));
}

// minify html

async function htmls() {
    const html_options = {
        includeAutoGeneratedTags: true,
        removeAttributeQuotes: true,
        removeComments: true,
        removeRedundantAttributes: true,
        removeScriptTypeAttributes: true,
        removeStyleLinkTypeAttributes: true,
        sortClassName: true,
        useShortDoctype: true,
        collapseWhitespace: true
    };
    
    html_dirs.forEach((dir)=>{
    return src(dir+'**/*.html')   
        .on('data', function (file) {
            //console.log(file)
            const buferFile = Buffer.from(htmlMinify.minify(file.contents.toString(), html_options))
            return file.contents = buferFile
        })
        .pipe(dest(dir))
});
}

// extract css
function extract_css() {
    return src(statics('css/allcss.min.css'))
        .pipe(purgecss({
            content: [statics('js/alljs.min.js'), ...html_dirs.map((dir)=>{return dir+'**/*.html' })]
        }))
        .pipe(concat("extracts.min.css"))
        .pipe(dest(statics('css')))
}

// Define complex tasks
//const build = series(clean, copies, parallel(allcss, alljs, htmls, extract_css));
const build = series(clean, copies, allcss, alljs, htmls, extract_css);

exports.default = build;
